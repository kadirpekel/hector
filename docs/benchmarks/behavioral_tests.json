{
  "behavioral_tests": [
    {
      "id": "error_recovery_test",
      "name": "Error Recovery Behavior",
      "description": "Tests if structured reflection helps agent recover from errors",
      "prompt": "Calculate 100 / 0. If that fails, calculate 100 / 5 instead and tell me the result.",
      "expected_behavior": {
        "should_detect_error": true,
        "should_retry_with_alternative": true,
        "should_provide_final_answer": true,
        "final_answer_should_be": "20"
      },
      "success_criteria": [
        {
          "criterion": "error_detected",
          "description": "Agent recognizes division by zero error",
          "check_pattern": "error|fail|cannot|division.*zero"
        },
        {
          "criterion": "alternative_attempted",
          "description": "Agent tries the alternative calculation",
          "check_pattern": "100.*5|alternative|instead"
        },
        {
          "criterion": "correct_answer",
          "description": "Agent provides correct final answer (20)",
          "check_pattern": "20|twenty"
        }
      ],
      "tests_feature": "reflection"
    },
    {
      "id": "completeness_test",
      "name": "Task Completeness Verification",
      "description": "Tests if completion verification prevents incomplete work",
      "prompt": "I need you to do THREE things: 1) Calculate 25 * 4, 2) Calculate 100 / 5, and 3) Add the results together. Make sure you do ALL THREE steps.",
      "expected_behavior": {
        "should_do_step_1": true,
        "should_do_step_2": true,
        "should_do_step_3": true,
        "should_report_all_results": true,
        "final_answer_should_be": "120"
      },
      "success_criteria": [
        {
          "criterion": "step_1_completed",
          "description": "First calculation done (25*4=100)",
          "check_pattern": "25.*4.*100|100.*25.*4"
        },
        {
          "criterion": "step_2_completed",
          "description": "Second calculation done (100/5=20)",
          "check_pattern": "100.*5.*20|20.*100.*5"
        },
        {
          "criterion": "step_3_completed",
          "description": "Final addition done (100+20=120)",
          "check_pattern": "120|one hundred.?twenty"
        }
      ],
      "tests_feature": "completion"
    },
    {
      "id": "iterative_refinement_test",
      "name": "Iterative Refinement Quality",
      "description": "Tests if reflection improves decision-making across iterations",
      "prompt": "Calculate the following sequence: start with 10, multiply by 5, add 25, divide by 5, subtract 3. Show your work step by step.",
      "expected_behavior": {
        "should_show_each_step": true,
        "should_verify_intermediate_results": true,
        "final_answer_should_be": "12"
      },
      "success_criteria": [
        {
          "criterion": "step_by_step",
          "description": "Shows intermediate calculations",
          "check_pattern": "10.*5.*50|50.*25.*75|75.*5.*15|15.*3.*12"
        },
        {
          "criterion": "correct_final",
          "description": "Correct final answer (12)",
          "check_pattern": "12|twelve"
        }
      ],
      "tests_feature": "reflection"
    },
    {
      "id": "premature_stopping_test",
      "name": "Premature Stopping Prevention",
      "description": "Tests if completion verification catches incomplete work",
      "prompt": "Create a report that includes: 1) Calculate average of [10, 20, 30, 40], 2) Find the maximum value, 3) Calculate the range. The report must include ALL THREE metrics.",
      "expected_behavior": {
        "should_calculate_average": true,
        "should_find_maximum": true,
        "should_calculate_range": true,
        "should_present_all_three": true
      },
      "success_criteria": [
        {
          "criterion": "average_present",
          "description": "Average calculated (25)",
          "check_pattern": "average.*25|25.*average"
        },
        {
          "criterion": "maximum_present",
          "description": "Maximum identified (40)",
          "check_pattern": "max.*40|40.*max"
        },
        {
          "criterion": "range_present",
          "description": "Range calculated (30)",
          "check_pattern": "range.*30|30.*range"
        }
      ],
      "tests_feature": "completion"
    },
    {
      "id": "complex_dependency_test",
      "name": "Dependency Handling",
      "description": "Tests if goal extraction helps with dependent subtasks",
      "prompt": "Do these tasks IN ORDER: First, calculate 50 * 2. Second, take that result and divide by 5. Third, multiply that result by 3. Report the final answer.",
      "expected_behavior": {
        "should_follow_order": true,
        "should_use_previous_results": true,
        "final_answer_should_be": "60"
      },
      "success_criteria": [
        {
          "criterion": "first_step",
          "description": "First calculation (50*2=100)",
          "check_pattern": "50.*2.*100|100"
        },
        {
          "criterion": "second_step",
          "description": "Second calculation (100/5=20)",
          "check_pattern": "100.*5.*20|divide.*20"
        },
        {
          "criterion": "third_step",
          "description": "Third calculation (20*3=60)",
          "check_pattern": "20.*3.*60|60"
        }
      ],
      "tests_feature": "goals"
    },
    {
      "id": "error_cascade_test",
      "name": "Error Cascade Handling",
      "description": "Tests if reflection helps prevent error cascades",
      "prompt": "Calculate: Step 1: 100 / 0. Step 2: Take result and add 50. Step 3: Multiply by 2. If any step fails, use 100 as a fallback value.",
      "expected_behavior": {
        "should_detect_error_in_step_1": true,
        "should_use_fallback": true,
        "should_continue_with_valid_value": true,
        "final_answer_should_be": "300"
      },
      "success_criteria": [
        {
          "criterion": "error_handled",
          "description": "Error detected and handled",
          "check_pattern": "error|fail|fallback|100"
        },
        {
          "criterion": "fallback_used",
          "description": "Fallback value used (100)",
          "check_pattern": "fallback.*100|100.*fallback"
        },
        {
          "criterion": "correct_final",
          "description": "Correct calculation from fallback ((100+50)*2=300)",
          "check_pattern": "300|three hundred"
        }
      ],
      "tests_feature": "reflection"
    },
    {
      "id": "partial_completion_test",
      "name": "Partial Completion Detection",
      "description": "Tests if completion verification detects partial work",
      "prompt": "Generate a summary with: 1) Title: 'Test Report', 2) Three bullet points about testing, 3) Conclusion statement. Include ALL sections.",
      "expected_behavior": {
        "should_include_title": true,
        "should_include_bullets": true,
        "should_include_conclusion": true
      },
      "success_criteria": [
        {
          "criterion": "title_present",
          "description": "Title included",
          "check_pattern": "title.*test.*report|test.*report"
        },
        {
          "criterion": "bullets_present",
          "description": "Three bullet points present",
          "check_pattern": "[-*•].*[-*•].*[-*•]|1\\.|2\\.|3\\."
        },
        {
          "criterion": "conclusion_present",
          "description": "Conclusion statement present",
          "check_pattern": "conclusion|summary|final"
        }
      ],
      "tests_feature": "completion"
    },
    {
      "id": "multi_agent_planning_test",
      "name": "Multi-Agent Task Planning",
      "description": "Tests if goal extraction produces structured plans",
      "prompt": "I need to: 1) Research current weather, 2) Based on weather, calculate recommended clothing layers, 3) Suggest activities. Plan this out.",
      "expected_behavior": {
        "should_identify_subtasks": true,
        "should_identify_dependencies": true,
        "should_suggest_execution_order": true
      },
      "success_criteria": [
        {
          "criterion": "subtasks_identified",
          "description": "All three subtasks mentioned",
          "check_pattern": "weather.*clothi.*activ|research.*calculate.*suggest"
        },
        {
          "criterion": "dependencies_noted",
          "description": "Dependencies between tasks noted",
          "check_pattern": "based.*on|after|then|first.*second.*third"
        },
        {
          "criterion": "order_specified",
          "description": "Execution order specified",
          "check_pattern": "order|sequence|first|step"
        }
      ],
      "tests_feature": "goals"
    },
    {
      "id": "quality_vs_quantity_test",
      "name": "Quality vs Quantity Trade-off",
      "description": "Tests if features improve output quality without excessive iterations",
      "prompt": "Calculate the compound interest on $1000 at 5% annual rate for 3 years. Show your calculation.",
      "expected_behavior": {
        "should_show_formula": true,
        "should_show_calculation": true,
        "should_provide_final_amount": true,
        "max_iterations_should_be": 2
      },
      "success_criteria": [
        {
          "criterion": "formula_or_method",
          "description": "Explains the method",
          "check_pattern": "compound|formula|interest"
        },
        {
          "criterion": "calculation_shown",
          "description": "Shows calculation steps",
          "check_pattern": "1000.*1\\.05|1050.*1\\.05|1157"
        },
        {
          "criterion": "final_amount",
          "description": "Provides final amount (~$1157.63)",
          "check_pattern": "1157|1158|eleven.*fifty"
        }
      ],
      "tests_feature": "all"
    },
    {
      "id": "consistency_test",
      "name": "Consistency Across Similar Tasks",
      "description": "Tests if features improve consistency",
      "prompt": "Calculate these three: A) 15 * 6, B) 90 / 3, C) 30 + 30. Verify all three equal 90.",
      "expected_behavior": {
        "should_calculate_all_three": true,
        "should_verify_equality": true,
        "should_confirm_all_equal_90": true
      },
      "success_criteria": [
        {
          "criterion": "all_calculated",
          "description": "All three calculations performed",
          "check_pattern": "15.*6.*90.*3.*30"
        },
        {
          "criterion": "verification_done",
          "description": "Equality verified",
          "check_pattern": "equal|same|all.*90|verify"
        },
        {
          "criterion": "confirmation",
          "description": "Confirms all equal 90",
          "check_pattern": "confirm|yes|correct|all.*equal.*90"
        }
      ],
      "tests_feature": "reflection"
    }
  ]
}

