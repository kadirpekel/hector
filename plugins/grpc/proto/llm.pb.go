// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: llm.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamChunk_ChunkType int32

const (
	StreamChunk_TEXT      StreamChunk_ChunkType = 0
	StreamChunk_TOOL_CALL StreamChunk_ChunkType = 1
	StreamChunk_DONE      StreamChunk_ChunkType = 2
	StreamChunk_ERROR     StreamChunk_ChunkType = 3
)

// Enum value maps for StreamChunk_ChunkType.
var (
	StreamChunk_ChunkType_name = map[int32]string{
		0: "TEXT",
		1: "TOOL_CALL",
		2: "DONE",
		3: "ERROR",
	}
	StreamChunk_ChunkType_value = map[string]int32{
		"TEXT":      0,
		"TOOL_CALL": 1,
		"DONE":      2,
		"ERROR":     3,
	}
)

func (x StreamChunk_ChunkType) Enum() *StreamChunk_ChunkType {
	p := new(StreamChunk_ChunkType)
	*p = x
	return p
}

func (x StreamChunk_ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamChunk_ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_llm_proto_enumTypes[0].Descriptor()
}

func (StreamChunk_ChunkType) Type() protoreflect.EnumType {
	return &file_llm_proto_enumTypes[0]
}

func (x StreamChunk_ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamChunk_ChunkType.Descriptor instead.
func (StreamChunk_ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{5, 0}
}

// Message represents a conversation message
type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"` // "user", "assistant", "system", "tool"
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ToolCalls     []*ToolCall            `protobuf:"bytes,3,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	ToolCallId    string                 `protobuf:"bytes,4,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_llm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *Message) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

// ToolDefinition defines a tool that can be called
type ToolDefinition struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ParametersJson string                 `protobuf:"bytes,3,opt,name=parameters_json,json=parametersJson,proto3" json:"parameters_json,omitempty"` // JSON schema for parameters
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ToolDefinition) Reset() {
	*x = ToolDefinition{}
	mi := &file_llm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolDefinition) ProtoMessage() {}

func (x *ToolDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolDefinition.ProtoReflect.Descriptor instead.
func (*ToolDefinition) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{1}
}

func (x *ToolDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToolDefinition) GetParametersJson() string {
	if x != nil {
		return x.ParametersJson
	}
	return ""
}

// ToolCall represents a tool call from the LLM
type ToolCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ArgumentsJson string                 `protobuf:"bytes,3,opt,name=arguments_json,json=argumentsJson,proto3" json:"arguments_json,omitempty"` // JSON-encoded arguments
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	mi := &file_llm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{2}
}

func (x *ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolCall) GetArgumentsJson() string {
	if x != nil {
		return x.ArgumentsJson
	}
	return ""
}

// GenerateRequest requests text generation
type GenerateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Tools         []*ToolDefinition      `protobuf:"bytes,2,rep,name=tools,proto3" json:"tools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateRequest) Reset() {
	*x = GenerateRequest{}
	mi := &file_llm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRequest) ProtoMessage() {}

func (x *GenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRequest.ProtoReflect.Descriptor instead.
func (*GenerateRequest) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GenerateRequest) GetTools() []*ToolDefinition {
	if x != nil {
		return x.Tools
	}
	return nil
}

// GenerateResponse returns generated text
type GenerateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	ToolCalls     []*ToolCall            `protobuf:"bytes,2,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	TokensUsed    int32                  `protobuf:"varint,3,opt,name=tokens_used,json=tokensUsed,proto3" json:"tokens_used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateResponse) Reset() {
	*x = GenerateResponse{}
	mi := &file_llm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateResponse) ProtoMessage() {}

func (x *GenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateResponse.ProtoReflect.Descriptor instead.
func (*GenerateResponse) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GenerateResponse) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *GenerateResponse) GetTokensUsed() int32 {
	if x != nil {
		return x.TokensUsed
	}
	return 0
}

// StreamChunk represents a chunk of streaming response
type StreamChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          StreamChunk_ChunkType  `protobuf:"varint,1,opt,name=type,proto3,enum=hector.plugin.StreamChunk_ChunkType" json:"type,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ToolCall      *ToolCall              `protobuf:"bytes,3,opt,name=tool_call,json=toolCall,proto3" json:"tool_call,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	TokensUsed    int32                  `protobuf:"varint,5,opt,name=tokens_used,json=tokensUsed,proto3" json:"tokens_used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamChunk) Reset() {
	*x = StreamChunk{}
	mi := &file_llm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChunk) ProtoMessage() {}

func (x *StreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChunk.ProtoReflect.Descriptor instead.
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{5}
}

func (x *StreamChunk) GetType() StreamChunk_ChunkType {
	if x != nil {
		return x.Type
	}
	return StreamChunk_TEXT
}

func (x *StreamChunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChunk) GetToolCall() *ToolCall {
	if x != nil {
		return x.ToolCall
	}
	return nil
}

func (x *StreamChunk) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *StreamChunk) GetTokensUsed() int32 {
	if x != nil {
		return x.TokensUsed
	}
	return 0
}

// ModelInfo returns information about the model
type ModelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	MaxTokens     int32                  `protobuf:"varint,2,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	Temperature   float64                `protobuf:"fixed64,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	mi := &file_llm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_llm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_llm_proto_rawDescGZIP(), []int{6}
}

func (x *ModelInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelInfo) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ModelInfo) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

var File_llm_proto protoreflect.FileDescriptor

const file_llm_proto_rawDesc = "" +
	"\n" +
	"\tllm.proto\x12\rhector.plugin\x1a\fcommon.proto\"\x91\x01\n" +
	"\aMessage\x12\x12\n" +
	"\x04role\x18\x01 \x01(\tR\x04role\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x126\n" +
	"\n" +
	"tool_calls\x18\x03 \x03(\v2\x17.hector.plugin.ToolCallR\ttoolCalls\x12 \n" +
	"\ftool_call_id\x18\x04 \x01(\tR\n" +
	"toolCallId\"o\n" +
	"\x0eToolDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12'\n" +
	"\x0fparameters_json\x18\x03 \x01(\tR\x0eparametersJson\"U\n" +
	"\bToolCall\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0earguments_json\x18\x03 \x01(\tR\rargumentsJson\"z\n" +
	"\x0fGenerateRequest\x122\n" +
	"\bmessages\x18\x01 \x03(\v2\x16.hector.plugin.MessageR\bmessages\x123\n" +
	"\x05tools\x18\x02 \x03(\v2\x1d.hector.plugin.ToolDefinitionR\x05tools\"\x7f\n" +
	"\x10GenerateResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x126\n" +
	"\n" +
	"tool_calls\x18\x02 \x03(\v2\x17.hector.plugin.ToolCallR\ttoolCalls\x12\x1f\n" +
	"\vtokens_used\x18\x03 \x01(\x05R\n" +
	"tokensUsed\"\x83\x02\n" +
	"\vStreamChunk\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.hector.plugin.StreamChunk.ChunkTypeR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x124\n" +
	"\ttool_call\x18\x03 \x01(\v2\x17.hector.plugin.ToolCallR\btoolCall\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x12\x1f\n" +
	"\vtokens_used\x18\x05 \x01(\x05R\n" +
	"tokensUsed\"9\n" +
	"\tChunkType\x12\b\n" +
	"\x04TEXT\x10\x00\x12\r\n" +
	"\tTOOL_CALL\x10\x01\x12\b\n" +
	"\x04DONE\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03\"k\n" +
	"\tModelInfo\x12\x1d\n" +
	"\n" +
	"model_name\x18\x01 \x01(\tR\tmodelName\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x02 \x01(\x05R\tmaxTokens\x12 \n" +
	"\vtemperature\x18\x03 \x01(\x01R\vtemperature2\xee\x04\n" +
	"\vLLMProvider\x12Q\n" +
	"\n" +
	"Initialize\x12 .hector.plugin.InitializeRequest\x1a!.hector.plugin.InitializeResponse\x12K\n" +
	"\bShutdown\x12\x1e.hector.plugin.ShutdownRequest\x1a\x1f.hector.plugin.ShutdownResponse\x12E\n" +
	"\x06Health\x12\x1c.hector.plugin.HealthRequest\x1a\x1d.hector.plugin.HealthResponse\x12N\n" +
	"\vGetManifest\x12\x1e.hector.plugin.ManifestRequest\x1a\x1f.hector.plugin.ManifestResponse\x12H\n" +
	"\tGetStatus\x12\x1c.hector.plugin.StatusRequest\x1a\x1d.hector.plugin.StatusResponse\x12K\n" +
	"\bGenerate\x12\x1e.hector.plugin.GenerateRequest\x1a\x1f.hector.plugin.GenerateResponse\x12Q\n" +
	"\x11GenerateStreaming\x12\x1e.hector.plugin.GenerateRequest\x1a\x1a.hector.plugin.StreamChunk0\x01\x12>\n" +
	"\fGetModelInfo\x12\x14.hector.plugin.Empty\x1a\x18.hector.plugin.ModelInfoB1Z/github.com/kadirpekel/hector/plugins/grpc/protob\x06proto3"

var (
	file_llm_proto_rawDescOnce sync.Once
	file_llm_proto_rawDescData []byte
)

func file_llm_proto_rawDescGZIP() []byte {
	file_llm_proto_rawDescOnce.Do(func() {
		file_llm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_llm_proto_rawDesc), len(file_llm_proto_rawDesc)))
	})
	return file_llm_proto_rawDescData
}

var file_llm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_llm_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_llm_proto_goTypes = []any{
	(StreamChunk_ChunkType)(0), // 0: hector.plugin.StreamChunk.ChunkType
	(*Message)(nil),            // 1: hector.plugin.Message
	(*ToolDefinition)(nil),     // 2: hector.plugin.ToolDefinition
	(*ToolCall)(nil),           // 3: hector.plugin.ToolCall
	(*GenerateRequest)(nil),    // 4: hector.plugin.GenerateRequest
	(*GenerateResponse)(nil),   // 5: hector.plugin.GenerateResponse
	(*StreamChunk)(nil),        // 6: hector.plugin.StreamChunk
	(*ModelInfo)(nil),          // 7: hector.plugin.ModelInfo
	(*InitializeRequest)(nil),  // 8: hector.plugin.InitializeRequest
	(*ShutdownRequest)(nil),    // 9: hector.plugin.ShutdownRequest
	(*HealthRequest)(nil),      // 10: hector.plugin.HealthRequest
	(*ManifestRequest)(nil),    // 11: hector.plugin.ManifestRequest
	(*StatusRequest)(nil),      // 12: hector.plugin.StatusRequest
	(*Empty)(nil),              // 13: hector.plugin.Empty
	(*InitializeResponse)(nil), // 14: hector.plugin.InitializeResponse
	(*ShutdownResponse)(nil),   // 15: hector.plugin.ShutdownResponse
	(*HealthResponse)(nil),     // 16: hector.plugin.HealthResponse
	(*ManifestResponse)(nil),   // 17: hector.plugin.ManifestResponse
	(*StatusResponse)(nil),     // 18: hector.plugin.StatusResponse
}
var file_llm_proto_depIdxs = []int32{
	3,  // 0: hector.plugin.Message.tool_calls:type_name -> hector.plugin.ToolCall
	1,  // 1: hector.plugin.GenerateRequest.messages:type_name -> hector.plugin.Message
	2,  // 2: hector.plugin.GenerateRequest.tools:type_name -> hector.plugin.ToolDefinition
	3,  // 3: hector.plugin.GenerateResponse.tool_calls:type_name -> hector.plugin.ToolCall
	0,  // 4: hector.plugin.StreamChunk.type:type_name -> hector.plugin.StreamChunk.ChunkType
	3,  // 5: hector.plugin.StreamChunk.tool_call:type_name -> hector.plugin.ToolCall
	8,  // 6: hector.plugin.LLMProvider.Initialize:input_type -> hector.plugin.InitializeRequest
	9,  // 7: hector.plugin.LLMProvider.Shutdown:input_type -> hector.plugin.ShutdownRequest
	10, // 8: hector.plugin.LLMProvider.Health:input_type -> hector.plugin.HealthRequest
	11, // 9: hector.plugin.LLMProvider.GetManifest:input_type -> hector.plugin.ManifestRequest
	12, // 10: hector.plugin.LLMProvider.GetStatus:input_type -> hector.plugin.StatusRequest
	4,  // 11: hector.plugin.LLMProvider.Generate:input_type -> hector.plugin.GenerateRequest
	4,  // 12: hector.plugin.LLMProvider.GenerateStreaming:input_type -> hector.plugin.GenerateRequest
	13, // 13: hector.plugin.LLMProvider.GetModelInfo:input_type -> hector.plugin.Empty
	14, // 14: hector.plugin.LLMProvider.Initialize:output_type -> hector.plugin.InitializeResponse
	15, // 15: hector.plugin.LLMProvider.Shutdown:output_type -> hector.plugin.ShutdownResponse
	16, // 16: hector.plugin.LLMProvider.Health:output_type -> hector.plugin.HealthResponse
	17, // 17: hector.plugin.LLMProvider.GetManifest:output_type -> hector.plugin.ManifestResponse
	18, // 18: hector.plugin.LLMProvider.GetStatus:output_type -> hector.plugin.StatusResponse
	5,  // 19: hector.plugin.LLMProvider.Generate:output_type -> hector.plugin.GenerateResponse
	6,  // 20: hector.plugin.LLMProvider.GenerateStreaming:output_type -> hector.plugin.StreamChunk
	7,  // 21: hector.plugin.LLMProvider.GetModelInfo:output_type -> hector.plugin.ModelInfo
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_llm_proto_init() }
func file_llm_proto_init() {
	if File_llm_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_llm_proto_rawDesc), len(file_llm_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_llm_proto_goTypes,
		DependencyIndexes: file_llm_proto_depIdxs,
		EnumInfos:         file_llm_proto_enumTypes,
		MessageInfos:      file_llm_proto_msgTypes,
	}.Build()
	File_llm_proto = out.File
	file_llm_proto_goTypes = nil
	file_llm_proto_depIdxs = nil
}
