// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: llm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMProvider_Initialize_FullMethodName        = "/hector.plugin.LLMProvider/Initialize"
	LLMProvider_Shutdown_FullMethodName          = "/hector.plugin.LLMProvider/Shutdown"
	LLMProvider_Health_FullMethodName            = "/hector.plugin.LLMProvider/Health"
	LLMProvider_GetManifest_FullMethodName       = "/hector.plugin.LLMProvider/GetManifest"
	LLMProvider_GetStatus_FullMethodName         = "/hector.plugin.LLMProvider/GetStatus"
	LLMProvider_Generate_FullMethodName          = "/hector.plugin.LLMProvider/Generate"
	LLMProvider_GenerateStreaming_FullMethodName = "/hector.plugin.LLMProvider/GenerateStreaming"
	LLMProvider_GetModelInfo_FullMethodName      = "/hector.plugin.LLMProvider/GetModelInfo"
)

// LLMProviderClient is the client API for LLMProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LLM Provider Plugin Service
type LLMProviderClient interface {
	// Initialize the plugin with configuration
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// Shutdown the plugin
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Check plugin health
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Get plugin manifest
	GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
	// Get plugin status
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Generate a response (non-streaming)
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	// Generate a streaming response
	GenerateStreaming(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamChunk], error)
	// Get model information
	GetModelInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelInfo, error)
}

type lLMProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMProviderClient(cc grpc.ClientConnInterface) LLMProviderClient {
	return &lLMProviderClient{cc}
}

func (c *lLMProviderClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, LLMProvider_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, LLMProvider_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, LLMProvider_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, LLMProvider_GetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LLMProvider_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, LLMProvider_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderClient) GenerateStreaming(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMProvider_ServiceDesc.Streams[0], LLMProvider_GenerateStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateRequest, StreamChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMProvider_GenerateStreamingClient = grpc.ServerStreamingClient[StreamChunk]

func (c *lLMProviderClient) GetModelInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelInfo)
	err := c.cc.Invoke(ctx, LLMProvider_GetModelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMProviderServer is the server API for LLMProvider service.
// All implementations must embed UnimplementedLLMProviderServer
// for forward compatibility.
//
// LLM Provider Plugin Service
type LLMProviderServer interface {
	// Initialize the plugin with configuration
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// Shutdown the plugin
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Check plugin health
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Get plugin manifest
	GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	// Get plugin status
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Generate a response (non-streaming)
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	// Generate a streaming response
	GenerateStreaming(*GenerateRequest, grpc.ServerStreamingServer[StreamChunk]) error
	// Get model information
	GetModelInfo(context.Context, *Empty) (*ModelInfo, error)
	mustEmbedUnimplementedLLMProviderServer()
}

// UnimplementedLLMProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMProviderServer struct{}

func (UnimplementedLLMProviderServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedLLMProviderServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedLLMProviderServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedLLMProviderServer) GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedLLMProviderServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedLLMProviderServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedLLMProviderServer) GenerateStreaming(*GenerateRequest, grpc.ServerStreamingServer[StreamChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStreaming not implemented")
}
func (UnimplementedLLMProviderServer) GetModelInfo(context.Context, *Empty) (*ModelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedLLMProviderServer) mustEmbedUnimplementedLLMProviderServer() {}
func (UnimplementedLLMProviderServer) testEmbeddedByValue()                     {}

// UnsafeLLMProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMProviderServer will
// result in compilation errors.
type UnsafeLLMProviderServer interface {
	mustEmbedUnimplementedLLMProviderServer()
}

func RegisterLLMProviderServer(s grpc.ServiceRegistrar, srv LLMProviderServer) {
	// If the following call pancis, it indicates UnimplementedLLMProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMProvider_ServiceDesc, srv)
}

func _LLMProvider_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).GetManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProvider_GenerateStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMProviderServer).GenerateStreaming(m, &grpc.GenericServerStream[GenerateRequest, StreamChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMProvider_GenerateStreamingServer = grpc.ServerStreamingServer[StreamChunk]

func _LLMProvider_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProvider_GetModelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServer).GetModelInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMProvider_ServiceDesc is the grpc.ServiceDesc for LLMProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hector.plugin.LLMProvider",
	HandlerType: (*LLMProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _LLMProvider_Initialize_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _LLMProvider_Shutdown_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LLMProvider_Health_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _LLMProvider_GetManifest_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _LLMProvider_GetStatus_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _LLMProvider_Generate_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _LLMProvider_GetModelInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStreaming",
			Handler:       _LLMProvider_GenerateStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm.proto",
}
