# Mixed Agents Example - Native + External A2A Agents
# Demonstrates Hector's ability to orchestrate both local and remote agents

global:
  a2a_server:
    enabled: true
    host: "0.0.0.0"
    port: 8080

# Define both native and external agents in the same config!
agents:
  # ============================================================================
  # NATIVE AGENTS - Run locally in this Hector instance
  # ============================================================================
  
  local_researcher:
    type: "native"  # Optional - defaults to "native"
    name: "Local Research Agent"
    description: "Native agent that gathers information"
    llm: "main-llm"
    tools:
      - execute_command
    reasoning:
      engine: "chain-of-thought"
      max_iterations: 5
    prompt:
      system_role: |
        You are a research specialist. Gather comprehensive information
        and provide clear, well-structured summaries.
  
  local_writer:
    # type: "native" is implied when omitted
    name: "Local Content Writer"
    description: "Native agent that creates written content"
    llm: "main-llm"
    tools:
      - write_file
    reasoning:
      engine: "chain-of-thought"
      max_iterations: 5
    prompt:
      system_role: |
        You are a professional content writer. Create clear,
        engaging content with proper structure.
  
  # ============================================================================
  # EXTERNAL A2A AGENTS - Remote agents accessed via A2A protocol
  # ============================================================================
  
  external_specialist:
    type: "a2a"  # External A2A agent
    name: "External Specialist"
    description: "External A2A agent with specialized capabilities"
    url: "https://external-server.com/agents/specialist"
    # No LLM, reasoning, or tools needed - external agent has its own!
  
  partner_analyst:
    type: "a2a"
    name: "Partner Analysis Agent"
    description: "Third-party A2A agent for data analysis"
    url: "https://partner-service.ai/agents/analyst"
    # Hector transparently integrates it - users see it like any other agent
  
  # ============================================================================
  # ORCHESTRATOR - Coordinates ALL agents (native + external)
  # ============================================================================
  
  orchestrator:
    type: "native"
    name: "Hybrid Orchestrator"
    description: "Orchestrates both local and external agents"
    llm: "main-llm"
    tools:
      - agent_call  # Can call BOTH native and external agents!
    reasoning:
      engine: "supervisor"
      max_iterations: 20
    prompt:
      system_role: |
        You orchestrate a team of specialized agents.
        
        AVAILABLE AGENTS:
        - local_researcher: Local research specialist (native)
        - local_writer: Local content creator (native)
        - external_specialist: Remote specialist (external A2A)
        - partner_analyst: Partner's analyst (external A2A)
        
        Delegate tasks to the most appropriate agent, whether local or remote.
        The A2A protocol makes them all equally accessible!

# ============================================================================
# LLM CONFIGURATION (only for native agents)
# ============================================================================

llms:
  main-llm:
    type: "openai"
    model: "gpt-4o-mini"
    api_key: "${OPENAI_API_KEY}"
    temperature: 0.7
    max_tokens: 4000

# ============================================================================
# TOOLS CONFIGURATION (only for native agents)
# ============================================================================

tools:
  execute_command:
    type: command
    allowed_commands: ["curl", "echo", "cat"]
    working_directory: "."
  
  write_file:
    type: wirte_file
    working_directory: "./output"

# ============================================================================
# USAGE EXAMPLES
# ============================================================================

# Start server (exposes ALL agents - native and external):
#   $ hector serve --config configs/mixed-agents-example.yaml

# List all agents (you'll see both types):
#   $ hector list
#   ðŸ“‹ Available agents:
#     ðŸ¤– Local Research Agent (local_researcher) [native]
#     ðŸ¤– Local Content Writer (local_writer) [native]
#     ðŸ¤– External Specialist (external_specialist) [external]
#     ðŸ¤– Partner Analysis Agent (partner_analyst) [external]
#     ðŸ¤– Hybrid Orchestrator (orchestrator) [native]

# Call any agent (native or external - same API!):
#   $ hector call local_researcher "Research AI trends"
#   $ hector call external_specialist "Analyze data X"

# Orchestrator can use ALL agents:
#   $ hector call orchestrator "Research AI, analyze with partner, write report"
#   
#   The orchestrator will:
#   1. Call local_researcher (native)
#   2. Call partner_analyst (external A2A)
#   3. Call local_writer (native)
#   4. Synthesize results

# Key Benefits:
# âœ… Single YAML configuration for entire multi-agent system
# âœ… Mix local and remote agents seamlessly
# âœ… No code required - pure declarative
# âœ… A2A protocol makes everything interoperable
# âœ… Orchestrators work with any agent type

