# ============================================================================
# STRUCTURED OUTPUT - Minimal Configuration
# ============================================================================
#
# This demonstrates structured output capabilities across different providers.
# LLMs respond with validated JSON matching your schema.
#
# PREREQUISITES:
# 1. OpenAI API key: export OPENAI_API_KEY="sk-..."
# 2. Gemini API key (optional): export GEMINI_API_KEY="..."
# 3. Anthropic API key (optional): export ANTHROPIC_API_KEY="..."
#
# QUICK START:
#   hector serve --config configs/structured-output-example.yaml
#   hector call sentiment_analyzer "I love this product!"      # OpenAI (json_schema mode)
#   hector call gemini_sentiment "This is amazing!"            # Gemini (native responseSchema)
#   hector call anthropic_sentiment "This is terrible!"        # Anthropic (prefill technique)
#   hector call data_extractor "John works at Google as SWE"
#   hector chat classifier
#
# ============================================================================

# LLM Configuration
llms:
  main-llm:
    type: "openai"
    model: "gpt-4o-mini"
    api_key: "${OPENAI_API_KEY}"
    temperature: 0.0
    max_tokens: 1000
  
  gemini-llm:
    type: "gemini"
    model: "gemini-2.0-flash-exp"
    api_key: "${GEMINI_API_KEY}"
    temperature: 0.7
    max_tokens: 1000
  
  anthropic-llm:
    type: "anthropic"
    model: "claude-sonnet-4-20250514"
    api_key: "${ANTHROPIC_API_KEY}"
    temperature: 0.7
    max_tokens: 1000

# Agents with Structured Output
agents:
  # ============================================================================
  # SENTIMENT ANALYZER - Returns structured sentiment analysis
  # ============================================================================
  
  sentiment_analyzer:
    name: "Sentiment Analyzer"
    description: "Analyzes sentiment and returns structured JSON"
    llm: "gemini-llm"
    
    # Structured output configuration  
    structured_output:
      format: json
      schema:
        type: object
        properties:
          sentiment:
            type: string
            enum: ["positive", "negative", "neutral"]
          confidence:
            type: number
        required: ["sentiment", "confidence"]
        additionalProperties: false
    
    prompt:
      system_role: |
        You analyze text sentiment and return structured JSON with this format:
        {
          "sentiment": "positive|negative|neutral",
          "confidence": 0.0-1.0,
          "key_phrases": ["phrase1", "phrase2"]
        }
        Provide accurate sentiment classification with confidence scores.

  # ============================================================================
  # DATA EXTRACTOR - Extracts structured information from text
  # ============================================================================
  
  data_extractor:
    name: "Data Extractor"
    description: "Extracts structured data from unstructured text"
    llm: "main-llm"
    
    structured_output:
      format: json
      schema:
        type: object
        properties:
          name:
            type: string
          email:
            type: string
          company:
            type: string
        required: ["name", "email", "company"]
        additionalProperties: false
    
    prompt:
      system_role: |
        You extract structured information from text.
        Return only the information found - use null for missing fields.

  # ============================================================================
  # CLASSIFIER - Categorizes content into predefined categories
  # ============================================================================
  
  classifier:
    name: "Content Classifier"
    description: "Classifies content into categories with priority"
    llm: "main-llm"
    
    structured_output:
      format: json
      schema:
        type: object
        properties:
          category:
            type: string
            enum: ["bug", "feature", "question", "documentation"]
          priority:
            type: string
            enum: ["low", "medium", "high", "critical"]
        required: ["category", "priority"]
        additionalProperties: false
    
    prompt:
      system_role: |
        You classify content into categories.
        Provide clear categorization with appropriate priority levels.

  # ============================================================================
  # GEMINI SENTIMENT ANALYZER - Same task, different provider
  # ============================================================================
  
  gemini_sentiment:
    name: "Gemini Sentiment Analyzer"
    description: "Analyzes sentiment using Gemini with structured output"
    llm: "gemini-llm"
    
    structured_output:
      format: json
      schema:
        type: object
        properties:
          sentiment:
            type: string
            enum: ["positive", "negative", "neutral"]
          confidence:
            type: number
        required: ["sentiment", "confidence"]
        additionalProperties: false
    
    prompt:
      system_role: |
        You analyze text sentiment and return structured JSON.
        Provide accurate sentiment classification with confidence scores (0.0-1.0).

  # ============================================================================
  # ANTHROPIC SENTIMENT ANALYZER - Same task, Anthropic prefill technique
  # ============================================================================
  
  anthropic_sentiment:
    name: "Anthropic Sentiment Analyzer"
    description: "Analyzes sentiment using Claude with prefill technique"
    llm: "anthropic-llm"
    
    structured_output:
      format: json
      # Anthropic uses PREFILL technique - assistant message starts with "{"
      # This forces the model to continue with valid JSON
      prefill: "{"
      schema:
        type: object
        properties:
          sentiment:
            type: string
            enum: ["positive", "negative", "neutral"]
          confidence:
            type: number
        required: ["sentiment", "confidence"]
        additionalProperties: false
    
    prompt:
      system_role: |
        You analyze text sentiment and return structured JSON.
        Provide accurate sentiment classification with confidence scores (0.0-1.0).

# ============================================================================
# USAGE EXAMPLES
# ============================================================================

# Start server:
#   $ hector serve --config configs/structured-output-example.yaml

# Test sentiment analysis:
#   $ hector call sentiment_analyzer "This product is amazing! Best purchase ever!"
#   Output: {"sentiment": "positive", "confidence": 0.95, "key_phrases": ["amazing", "best"]}

# Test data extraction:
#   $ hector call data_extractor "John Doe works at Google as Senior Engineer. Email: john@gmail.com"
#   Output: {"person": {"name": "John Doe", "title": "Senior Engineer", "company": "Google"}, ...}

# Test classification:
#   $ hector call classifier "The app crashes when I click submit button"
#   Output: {"category": "bug", "priority": "high", "tags": ["crash", "ui"], ...}

# Interactive chat:
#   $ hector chat classifier
#   > The documentation is outdated and needs updating
#   {"category": "documentation", "priority": "medium", ...}

# ============================================================================
# NATIVE STRUCTURED OUTPUT TECHNIQUES BY PROVIDER
# ============================================================================
#
# Each provider uses a DIFFERENT native approach for structured output:
#
# 1. OpenAI - response_format with json_schema and strict: true
#    • Most strict - ALL properties must be in required array
#    • ALL objects must have additionalProperties: false
#    • Native API validation ensures 100% schema compliance
#
# 2. Gemini - responseMimeType: "application/json" + responseSchema
#    • Native JSON mode at API level
#    • Does NOT support additionalProperties field
#    • Supports propertyOrdering for consistent output
#
# 3. Anthropic - PREFILL technique (no native JSON mode parameter)
#    • Add assistant message starting with "{" to force JSON
#    • Add schema to system prompt for guidance
#    • Most flexible but least strict enforcement

# ============================================================================
# BENEFITS
# ============================================================================
# ✅ Type-safe responses - guaranteed structure
# ✅ No parsing needed - direct JSON output
# ✅ Validation built-in - schemas ensure correctness
# ✅ Provider-agnostic - works with OpenAI, Anthropic, Gemini
# ✅ Easy integration - plug into downstream systems

