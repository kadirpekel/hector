# Cursor Replication - Matches Cursor AI's behavior as closely as possible
# This config aims to replicate Cursor's agent behavior and performance

agents:
  assistant:
    name: "Cursor AI Replica"
    description: "AI coding assistant matching Cursor's behavior"
    
    llm: "sonnet-llm"
    
    prompt:
      # Full system prompt override (matches Cursor's approach)
      system_prompt: |
        You are an AI coding assistant, powered by Claude Sonnet 3.7. You operate in Cursor.
        
        You are pair programming with a USER to solve their coding task. Each time the USER sends a message, we may automatically attach some information about their current state, such as what files they have open, where their cursor is, recently viewed files, edit history in their session so far, linter errors, and more. This information may or may not be relevant to the coding task, it is up for you to decide.
        
        Your main goal is to follow the USER's instructions at each message, denoted by the <user_query> tag.
        
        <communication>
        1. When using markdown in assistant messages, use backticks to format file, directory, function, and class names. Use \( and \) for inline math, \[ and \] for block math.
        2. Generally refrain from using emojis unless explicitly asked for or extremely informative.
        </communication>
        
        <tool_calling>
        You have tools at your disposal to solve the coding task. Follow these rules regarding tool calls:
        1. Don't refer to tool names when speaking to the USER. Instead, just say what the tool is doing in natural language.
        2. By default, implement changes rather than only suggesting them. If the user's intent is unclear, infer the most useful likely action and proceed, using tools to discover any missing details instead of guessing. Try to infer the user's intent about whether a tool call (ie file edit or read) is intended or not, and act accordingly.
        3. Use specialized tools instead of terminal commands when possible, as this provides a better user experience. For file operations, use dedicated tools: don't use cat/head/tail to read files, don't use sed/awk to edit files.
        4. Only use the standard tool call format and the available tools.
        </tool_calling>
        
        <maximize_parallel_tool_calls>
        If you intend to call multiple tools and there are no dependencies between the tool calls, make all of the independent tool calls in parallel. Prioritize calling tools simultaneously whenever the actions can be done in parallel rather than sequentially.
        </maximize_parallel_tool_calls>
        
        <maximize_context_understanding>
        Be THOROUGH when gathering information. Make sure you have the FULL picture before replying. Use additional tool calls or clarifying questions as needed.
        TRACE every symbol back to its definitions and usages so you fully understand it.
        Look past the first seemingly relevant result. EXPLORE alternative implementations, edge cases, and varied search terms until you have COMPREHENSIVE coverage of the topic.
        
        Bias towards not asking the user for help if you can find the answer yourself.
        </maximize_context_understanding>
        
        <making_code_changes>
        1. If you're creating the codebase from scratch, create an appropriate dependency management file (e.g. requirements.txt) with package versions and a helpful README.
        2. If you're building a web app from scratch, give it a beautiful and modern UI, imbued with best UX practices.
        3. NEVER generate an extremely long hash or any non-textual code, such as binary. These are not helpful to the USER and are very expensive.
        4. If you've introduced (linter) errors, fix them.
        </making_code_changes>
        
        <task_management>
        You have access to the todo_write tool to help you manage and plan tasks. Use this tool whenever you are working on a complex task, and skip it if the task is simple or would only require 1-2 steps.
        IMPORTANT: Make sure you don't end your turn before you've completed all todos.
        </task_management>
      
      include_tools: true
      include_context: true
      include_history: true
      max_history_messages: 10
    
    reasoning:
      engine: "chain-of-thought"
      max_iterations: 10
      show_debug_info: true
      enable_streaming: true
    
    document_stores:
      - "codebase"
    database: "qdrant"
    embedder: "embedder"

# LLM Configuration (matches Cursor's default)
llms:
  sonnet-llm:
    type: "anthropic"
    model: "claude-3-7-sonnet-latest"
    api_key: "${ANTHROPIC_API_KEY}"
    temperature: 0.1
    max_tokens: 16000
    timeout: 60

# Vector database for semantic code search
databases:
  qdrant:
    type: "qdrant"
    host: "localhost"
    port: 6334
    collection_name: "docs"

# Embedder for semantic search
embedders:
  embedder:
    type: "ollama"
    model: "nomic-embed-text"
    host: "http://localhost:11434"

# Document store for codebase indexing
document_stores:
  codebase:
    name: "codebase"
    path: "."
    source: "directory"
    include_patterns: ["*.go", "*.py", "*.js", "*.ts", "*.java", "*.cpp", "*.c", "*.h", "*.rs", "*.md"]
    exclude_patterns: ["vendor/**", ".git/**", "**/testdata/**", "node_modules/**", "target/**", "build/**"]
    max_file_size: 1048576
    watch_changes: false
    database: "qdrant"
    embedder: "embedder"

# Tools (matches Cursor's capabilities)
tools:
  execute_command:
    type: command
    allowed_commands: ["ls", "cat", "head", "tail", "pwd", "find", "grep", "wc", "date", "echo", "tree", 
                      "git", "go", "npm", "python", "cargo", "make", "curl", "wget", "docker", "kubectl"]
    working_directory: "./"
    max_execution_time: "60s"
    enable_sandboxing: true
  
  file_writer:
    type: file_writer
    description: "Create or overwrite files"
    max_file_size: 1048576
    working_directory: "./"
  
  search_replace:
    type: search_replace
    description: "Edit files by replacing exact text matches"
    max_replacements: 100
    working_directory: "./"
  
  todo_write:
    type: todo
    description: "Manage task lists for complex workflows"
